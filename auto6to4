#!/bin/bash -f

#  auto6to4 - robustly and automatically enable IPv6 cloud around IPv4 host.
#  Copyright 2009, Barak A. Pearlmutter <barak@cs.nuim.ie>
#   Hamilton Institute, NUI Maynooth, Co. Kildare, Ireland
#   http://www-bcl.cs.nuim.ie/~barak/
#   (Much thanks to David Malone.  David wrote the book on IPv6; buy it!)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

# For the latest version visit http://github.com/barak/auto6to4

DESC=auto6to4

# Debian Dependencies
#  Depends: iproute, ipv6calc
#  Suggests: radvd

## See also

# Similar script: http://www.linux.it/~md/6to4
# Information: http://www.wlug.org.nz/6to4

## To Do

# - graceful error handling
# - figure out how to integrate into /etc/network/if-up.d/ etc
# - copy more schmutz from /etc/init.d/radvd
# - make into nice Debian package
# - use debconf to control radvd and true external IPv4 address
# - after setup test the tunnel and bring down if non-functional

set -e

usage()
{
    echo "Usage: auto6to4 [options] {start|stop|restart|reload|force-reload}"
    echo
    echo "  options  -i <ip-addr>   Use given external IPv4 address"
    echo "           -r             Disable radvd IPv6 route advertiser"
    echo "           -d             Debug (verbose output)"
    echo "           -h             Print this help text and exit"
    echo "           -v             Print version and exit"
    echo
    echo "Automatically sets up IPv6 using IPv4 tunnel to anycast address."
    echo
    echo "CAUTION: if radvd is installed and the -r option is not given,"
    echo "will route/advertise an IPv6 subnet on the local network."
}

version()
{
    echo auto6to4 1.17
}

# Name of tunnel interface to configure
tunnel=tun6in4
ip4relay=192.88.99.1

# IPv6 advertisement on local network
radvd=/usr/sbin/radvd
radvd_dir=/var/run/radvd
radvd_cnf=${radvd_dir}/radvd-auto.conf
radvd_pidfile=${radvd_dir}/radvd-auto.pid
radvd_uid=radvd
radvd_options="--config ${radvd_cnf} -u ${radvd_uid} -p ${radvd_pidfile}"

# misc defaults
debug=0

# process options
while getopts "hvi:rd" opt
do
    case "$opt" in
	h) usage; exit 0 ;;
	v) version; exit 0 ;;
	i) ip4addr=$OPTARG ;;
	r) unset radvd ;;
	d) debug=1 ;;
	*) usage; exit 2 ;;
    esac
done

shift $((OPTIND - 1))

if [ $# != 1 ]; then
    version; echo; usage
    exit 1
fi


case "$1" in
    start)
	## Get info and decide whether to bring up tunnel.

	# Check for IPv6 support in kernel
	if [ \! -e /proc/sys/net/ipv6 ]; then
	    echo "error: IPv6 support must be enabled in the kernel for ${DESC} to work."
	    exit
	fi

	# Get list of local 1st-class IPv4 addresses, unless given in option,
	# being careful to screen out addresses in non-global ranges.
	if [ -z ${ip4addr} ]; then
	    ip4addr=$(ip -o -4 addr show \
		| tr / ' ' \
		| awk '{print $4}' \
		| egrep -v '^127[.]' \
		| egrep -v '^10[.]' \
		| egrep -v '^172[.]1[6-9][.]' \
		| egrep -v '^172[.]2[0-9][.]' \
		| egrep -v '^172[.]3[0-1][.]' \
		| egrep -v '^192[.]168[.]' \
		| egrep -v '^169[.]254[.]')
	fi

	if [ ${debug} != 0 ]; then
	    echo "Suitable IPv4 addresses: ${ip4addr}"
	fi

	# abort if there are none
	if [ -z "${ip4addr}" ]; then
	    echo "warning: unable to enable 6to4 tunnel,"
	    echo "   no suitable IPv4 address configured."
	    exit 1
	fi

	# abort if there are more than one
	if echo "${ip4addr}" | egrep --silent ' '; then
	    echo "warning: not attempting to enable 6to4 tunnel,"
	    echo "   multiple suitable IPv4 addresses configured."
	    echo " Addresses: ${ip4addr}."
	    echo " Consider using option -i <IPv4-address-to-use>"
	    exit 1
	fi


	## Attempt to bring up tunnel

	# Convert chosen 1st-class IPv4 address into tunnel endpoint address
	ip6net=$(ipv6calc --in ipv4 --out ipv6 --action conv6to4 ${ip4addr})
	ip6addr=${ip6net}1

	if [ ${debug} != 0 ]; then
	    echo "ip6net: ${ip6net}"
	    echo "ip6addr: ${ip6addr}"
	fi

	# Kill tunnel if possibly alive
	if [ $(ip -6 tunnel show ${tunnel} | wc -l) != 0 ]; then
	    if [ ${debug} != 0 ]; then
		echo "killing tunnel ${tunnel}"
	    fi
	    ip tunnel del ${tunnel}
	fi

	# Flush tunnel from routing table if present
	if ip -6 route | egrep --silent " dev ${tunnel} " ; then
	    if [ ${debug} != 0 ]; then
		echo "flushing tunnel ${tunnel} from routing table"
	    fi
	    ip -6 route flush dev ${tunnel}
	    ip -6 addr flush dev ${tunnel}
	fi

	# configure and start the tunnel
	ip tunnel add ${tunnel} mode sit ttl 128 remote any local ${ip4addr}
	ip link set dev ${tunnel} up
	ip -6 addr add ${ip6addr}/16 dev ${tunnel}
	ip -6 route add ::/96 dev ${tunnel}
	ip -6 route add 2000::/3 via ::${ip4relay} dev ${tunnel}


	## Route and advertise IPv6 addresses on LAN

	if [ -z ${radvd} ]; then
	    # echo "radvd disabled"
	    exit
	fi

	# check if radvd is available
	if [ \! -x ${radvd} ]; then
	    echo "warning: no radvd executable, not advertising"
	    exit
	fi

	# Build a configuration file for radvd.
	# We make one stanza for each suitable interface,
	# with a subnet allocated to each.

	mkdir --parents ${radvd_dir}
	echo > ${radvd_cnf}

	interfaces=`ip -4 addr \
	    | egrep '^[0-9].*BROADCAST.*MULTICAST' \
	    | tr -d : \
	    | awk '{print $2}'`
	inum=1
	for i in ${interfaces}; do
	    pref=`echo ${ip6net}${inum} | sed 's/::/:/'`
	    cat >> ${radvd_cnf} <<EOF
interface ${i}
{
   AdvSendAdvert on;
   IgnoreIfMissing on;
   AdvDefaultLifetime 600;
   AdvDefaultPreference low;
   prefix ${pref}::/64
   {
   };
};
EOF
	    # set up to route each subnet
	    if [ ${debug} != 0 ]; then
		echo "address ${pref}::1/64 dev ${i}"
	    fi
	    ip -6 addr add ${pref}::1/64 dev ${i}
	    inum=$((inum + 1))
	done

        # Enable routing
	sysctl -q -w net.ipv6.conf.all.accept_ra=0
	sysctl -q -w net.ipv6.conf.all.forwarding=1

	# shut down any existing ravdvd, using appropriate UID for security
	if [ -f ${radvd_pidfile} ]; then
	    su -s /bin/sh -c "kill `cat ${radvd_pidfile}`" ${radvd_uid}
	fi

	# Start advertising
	${radvd} ${radvd_options}

	;;
    stop)
	# shut down any existing ravdvd, using appropriate UID for security
	if [ -f ${radvd_pidfile} ]; then
	    su -s /bin/sh -c "kill `cat ${radvd_pidfile}`" ${radvd_uid}
	fi

	# Flush tunnel from routing table if present
	if ip -6 route | egrep --silent " dev ${tunnel} " ; then
	    ip -6 route flush dev ${tunnel}
	    ip -6 addr flush dev ${tunnel}
	fi

	# shut down tunnel
	ip link set dev ${tunnel} down

	# kill tunnel
	ip tunnel del ${tunnel}
	;;
    restart|reload|force-reload)
	$0 stop
	$0 start
	;;
    *)
	usage
	exit 1
	;;
esac

exit 0
